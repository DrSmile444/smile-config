// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EslintMerger should merge mock eslint config 1`] = `
Object {
  "env": Object {
    "commonjs": true,
    "es2021": false,
    "node": true,
  },
  "extends": Array [
    "../../.eslintrc.json",
    "rule-b-extends",
  ],
  "ignorePatterns": Array [
    "!**/*",
  ],
  "overrides": Array [
    Object {
      "files": CommentArray [
        "*.ts",
        "*.tsx",
        "*.js",
        "*.jsx",
      ],
      "plugins": Array [
        "rule-a-plugin",
        "rule-b-plugin",
      ],
      "rules": Object {
        "rule-a": "replaced-by-b",
        "rule-a-2": "origin",
        "rule-b": "origin",
      },
    },
    Object {
      "files": CommentArray [
        "*.ts",
        "*.tsx",
      ],
      "plugins": CommentArray [
        "rule-b-ts-plugin",
      ],
      "rules": Object {
        "rule-b-ts": "origin",
      },
    },
  ],
}
`;

exports[`EslintMerger should merge real eslint config 1`] = `
Object {
  "env": Object {
    "es2021": true,
  },
  "extends": CommentArray [],
  "overrides": CommentArray [
    Object {
      "extends": CommentArray [
        "plugin:import/typescript",
        "plugin:@typescript-eslint/all",
      ],
      "files": CommentArray [
        "*.ts",
        "*.tsx",
      ],
      "parserOptions": Object {
        "createDefaultProgram": true,
        "project": CommentArray [
          "tsconfig.json",
        ],
      },
      "rules": Object {
        "@typescript-eslint/array-type": CommentArray [
          "error",
          Object {
            "default": "array",
          },
        ],
        "@typescript-eslint/comma-dangle": CommentArray [
          "error",
          "always-multiline",
        ],
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/explicit-function-return-type": "warn",
        "@typescript-eslint/explicit-member-accessibility": CommentArray [
          "off",
          Object {
            "accessibility": "explicit",
          },
        ],
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/lines-between-class-members": CommentArray [
          "error",
          "always",
          Object {
            "exceptAfterSingleLine": true,
          },
        ],
        "@typescript-eslint/member-delimiter-style": CommentArray [
          "error",
          Object {
            "multiline": Object {
              "delimiter": "semi",
              "requireLast": true,
            },
            "singleline": Object {
              "delimiter": "semi",
              "requireLast": false,
            },
          },
        ],
        "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/naming-convention": CommentArray [
          "error",
          Object {
            "custom": Object {
              "match": false,
              "regex": "^I[A-Z]",
            },
            "format": CommentArray [
              "PascalCase",
            ],
            "selector": "interface",
          },
          Object {
            "format": CommentArray [
              "strictCamelCase",
              "snake_case",
              "UPPER_CASE",
            ],
            "selector": "property",
          },
        ],
        "@typescript-eslint/no-duplicate-imports": CommentArray [
          "error",
        ],
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-extra-parens": "warn",
        "@typescript-eslint/no-extraneous-class": "off",
        "@typescript-eslint/no-inferrable-types": CommentArray [
          "off",
          Object {
            "ignoreParameters": true,
          },
        ],
        "@typescript-eslint/no-magic-numbers": "warn",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-type-alias": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/object-curly-spacing": CommentArray [
          "error",
          "always",
        ],
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-readonly-parameter-types": "off",
        "@typescript-eslint/quotes": CommentArray [
          "error",
          "single",
        ],
        "@typescript-eslint/semi": CommentArray [
          "error",
          "always",
        ],
        "@typescript-eslint/space-before-function-paren": CommentArray [
          "error",
          Object {
            "anonymous": "always",
            "asyncArrow": "always",
            "named": "never",
          },
        ],
        "@typescript-eslint/strict-boolean-expressions": "off",
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unbound-method": CommentArray [
          "error",
          Object {
            "ignoreStatic": true,
          },
        ],
        "@typescript-eslint/unified-signatures": "error",
        "indent": "off",
        "indent-legacy": "off",
        "no-duplicate-imports": "off",
        "no-shadow": "off",
      },
    },
    Object {
      "files": CommentArray [
        "*.spec.ts",
      ],
      "rules": Object {
        "@typescript-eslint/init-declarations": "warn",
        "@typescript-eslint/no-floating-promises": "off",
      },
    },
  ],
  "root": true,
  "settings": Object {
    "import/resolver": Object {
      "node": Object {
        "extensions": CommentArray [
          ".js",
          ".jsx",
          ".ts",
          ".tsx",
        ],
      },
      "typescript": Object {},
    },
  },
}
`;
